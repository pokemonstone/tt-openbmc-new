From 46b60c58280e9232e4995380c2cb8025c990ab88 Mon Sep 17 00:00:00 2001
From: Frederick Lee <Frederick_Lee@wiwynn.com>
Date: Mon, 20 Apr 2020 09:52:41 +0800
Subject: [PATCH 02/11] Change to steady_timer used in ADC sensor

---
 include/ADCSensor.hpp | 3 ++-
 src/ADCSensor.cpp     | 7 +++----
 src/ADCSensorMain.cpp | 6 +++---
 3 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/include/ADCSensor.hpp b/include/ADCSensor.hpp
index 602150f..0191780 100644
--- a/include/ADCSensor.hpp
+++ b/include/ADCSensor.hpp
@@ -10,6 +10,7 @@
 #include <stdexcept>
 #include <string>
 #include <vector>
+#include <boost/asio/steady_timer.hpp>
 
 class BridgeGpio
 {
@@ -67,7 +68,7 @@ class ADCSensor : public Sensor
   private:
     sdbusplus::asio::object_server& objServer;
     boost::asio::posix::stream_descriptor inputDev;
-    boost::asio::deadline_timer waitTimer;
+    boost::asio::steady_timer waitTimer;
     boost::asio::streambuf readBuf;
     std::string path;
     size_t errCount;
diff --git a/src/ADCSensor.cpp b/src/ADCSensor.cpp
index 027c889..e76aa5e 100644
--- a/src/ADCSensor.cpp
+++ b/src/ADCSensor.cpp
@@ -20,7 +20,6 @@
 
 #include <boost/algorithm/string/predicate.hpp>
 #include <boost/algorithm/string/replace.hpp>
-#include <boost/date_time/posix_time/posix_time.hpp>
 #include <cmath>
 #include <filesystem>
 #include <fstream>
@@ -105,7 +104,7 @@ void ADCSensor::setupRead(void)
         // value. Guarantee that the HW signal can be stable, the HW signal
         // could be instability.
         waitTimer.expires_from_now(
-            boost::posix_time::milliseconds(gpioBridgeEnableMs));
+            boost::asio::chrono::milliseconds(gpioBridgeEnableMs));
         waitTimer.async_wait([&](const boost::system::error_code& ec) {
             if (ec == boost::asio::error::operation_aborted)
             {
@@ -154,7 +153,7 @@ void ADCSensor::handleResponse(const boost::system::error_code& err)
             return;
         }
         inputDev.assign(fd);
-        waitTimer.expires_from_now(boost::posix_time::milliseconds(sensorPollMs));
+        waitTimer.expires_from_now(boost::asio::chrono::milliseconds(sensorPollMs));
         waitTimer.async_wait([&](const boost::system::error_code& ec) {
             if (ec == boost::asio::error::operation_aborted)
             {
@@ -230,7 +229,7 @@ void ADCSensor::handleResponse(const boost::system::error_code& err)
         return; // we're no longer valid
     }
     inputDev.assign(fd);
-    waitTimer.expires_from_now(boost::posix_time::milliseconds(sensorPollMs));
+    waitTimer.expires_from_now(boost::asio::chrono::milliseconds(sensorPollMs));
     waitTimer.async_wait([&](const boost::system::error_code& ec) {
         if (ec == boost::asio::error::operation_aborted)
         {
diff --git a/src/ADCSensorMain.cpp b/src/ADCSensorMain.cpp
index dba043d..97c6e3d 100644
--- a/src/ADCSensorMain.cpp
+++ b/src/ADCSensorMain.cpp
@@ -313,7 +313,7 @@ int main()
         createSensors(io, objectServer, sensors, systemBus, nullptr);
     });
 
-    boost::asio::deadline_timer filterTimer(io);
+    boost::asio::steady_timer filterTimer(io);
     std::function<void(sdbusplus::message::message&)> eventHandler =
         [&](sdbusplus::message::message& message) {
             if (message.is_method_error())
@@ -323,7 +323,7 @@ int main()
             }
             sensorsChanged->insert(message.get_path());
             // this implicitly cancels the timer
-            filterTimer.expires_from_now(boost::posix_time::seconds(1));
+            filterTimer.expires_from_now(boost::asio::chrono::seconds(1));
 
             filterTimer.async_wait([&](const boost::system::error_code& ec) {
                 if (ec == boost::asio::error::operation_aborted)
@@ -371,7 +371,7 @@ int main()
             }
 
             // this implicitly cancels the timer
-            filterTimer.expires_from_now(boost::posix_time::seconds(1));
+            filterTimer.expires_from_now(boost::asio::chrono::seconds(1));
 
             filterTimer.async_wait([&](const boost::system::error_code& ec) {
                 if (ec == boost::asio::error::operation_aborted)
-- 
2.24.1

